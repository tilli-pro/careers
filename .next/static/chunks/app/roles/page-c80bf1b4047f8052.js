(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[550],{2616:(e,t,n)=>{Promise.resolve().then(n.bind(n,3748)),Promise.resolve().then(n.bind(n,3943)),Promise.resolve().then(n.bind(n,8188)),Promise.resolve().then(n.bind(n,2481)),Promise.resolve().then(n.bind(n,4031)),Promise.resolve().then(n.bind(n,8710)),Promise.resolve().then(n.bind(n,4741)),Promise.resolve().then(n.bind(n,1374)),Promise.resolve().then(n.bind(n,9123)),Promise.resolve().then(n.bind(n,6013)),Promise.resolve().then(n.bind(n,135)),Promise.resolve().then(n.bind(n,9220)),Promise.resolve().then(n.bind(n,7019)),Promise.resolve().then(n.t.bind(n,9642,23)),Promise.resolve().then(n.bind(n,3162)),Promise.resolve().then(n.bind(n,5280)),Promise.resolve().then(n.bind(n,9491)),Promise.resolve().then(n.bind(n,9349))},3162:(e,t,n)=>{"use strict";n.d(t,{default:()=>y});var i,s=n(3069),o=n(7482);function r(e,t,n){return"uniform ".concat(e," ").concat(t).concat(n>0?"[".concat(n,"]"):"",";")}!function(e){e.Float="float",e.Int="int",e.Vec2="vec2",e.Vec3="vec3",e.Vec4="vec4",e.Mat4="mat4",e.Array="array",e.Struct="struct"}(i||(i={}));class a{update(e){var t;this.value&&(null===(t=this.gl.getContext())||void 0===t||t.uniform1f(e,this.value))}getDeclaration(e,t,n){if(this.properties.excludeFrom!==t)return r(this.type,e,n)}constructor(e,t,n={}){this.gl=e,this.value=t,this.properties=n,this.type="float"}}class l{update(e){var t;this.value&&(null===(t=this.gl.getContext())||void 0===t||t.uniform2fv(e,this.value))}getDeclaration(e,t,n){if(this.properties.excludeFrom!==t)return r(this.type,e,n)}constructor(e,t,n={}){this.gl=e,this.value=t,this.properties=n,this.type="vec2"}}class h{update(e){var t;this.value&&(null===(t=this.gl.getContext())||void 0===t||t.uniform3fv(e,this.value))}getDeclaration(e,t,n){if(this.properties.excludeFrom!==t)return r(this.type,e,n)}constructor(e,t,n={}){this.gl=e,this.value=t,this.properties=n,this.type="vec3"}}class c{update(e){var t;this.value&&(null===(t=this.gl.getContext())||void 0===t||t.uniform4fv(e,this.value))}getDeclaration(e,t,n){if(this.properties.excludeFrom!==t)return r(this.type,e,n)}constructor(e,t,n={}){this.gl=e,this.value=t,this.properties=n,this.type="vec4"}}class d{update(e){var t;this.value&&(null===(t=this.gl.getContext())||void 0===t||t.uniformMatrix4fv(e,this.properties.transpose,this.value))}getDeclaration(e,t,n){if(this.properties.excludeFrom!==t)return r(this.type,e,n)}constructor(e,t,n={transpose:!1}){this.gl=e,this.value=t,this.properties=n,this.type="mat4"}}class u{update(e){}getDeclaration(e,t,n){var i;if(this.properties.excludeFrom!==t)return"".concat(null===(i=this.value[0])||void 0===i?void 0:i.getDeclaration(e,t,this.value.length),"\nconst int ").concat(e,"_length = ").concat(this.value.length,";")}constructor(e,t,n={}){this.value=t,this.properties=n,this.type="array"}}class v{update(e){}getDeclaration(e,t,n){if(this.properties.excludeFrom===t)return;let i=e.replace("u_","");i=i.charAt(0).toUpperCase()+i.slice(1);let s=Object.entries(this.value).map(e=>{var n;let[i,s]=e;return null===(n=s.getDeclaration(i,t,0))||void 0===n?void 0:n.replace(/^uniform/,"")}).join("");return"uniform struct ".concat(i," {\n  ").concat(s,"\n} ").concat(e).concat(n>0?"[".concat(n,"]"):"",";")}constructor(e,t,n={}){this.value=t,this.properties=n,this.type="struct"}}class b{_getShaderByType(e,t){let n=this.gl.getContext(),i=n.createShader(e);return i&&(n.shaderSource(i,t),n.compileShader(i),n.getShaderParameter(i,n.COMPILE_STATUS)||console.error(n.getShaderInfoLog(i))),i}_getUniformVariableDeclarations(e,t){return Object.entries(e).map(e=>{let[n,i]=e;return i.getDeclaration(n,t,0)}).join("\n")}attachUniforms(e,t){e?t.type===i.Array?t.value.forEach((t,n)=>{this.attachUniforms("".concat(e,"[").concat(n,"]"),t)}):"struct"===t.type?Object.entries(t.value).forEach(t=>{let[n,i]=t;this.attachUniforms("".concat(e,".").concat(n),i)}):this.program&&Object.values(i).includes(t.type)&&this.uniformInstances.push({uniform:t,location:this.gl.getContext().getUniformLocation(this.program,e)}):Object.entries(t).forEach(e=>{let[t,n]=e;this.attachUniforms(t,n)})}constructor(e,t,n,i={},s={}){this.uniformInstances=[],this.properties=s,this.gl=e,this.uniforms=i;let o=this.gl.getContext(),r="\n            precision highp float;\n        ";this.vertexSource="\n            ".concat(r,"\n            attribute vec4 position;\n            attribute vec2 uv;\n            attribute vec2 uvNorm;\n            ").concat(this._getUniformVariableDeclarations(this.gl.commonUniforms,"vertex"),"\n            ").concat(this._getUniformVariableDeclarations(i,"vertex"),"\n            ").concat(t,"\n        "),this.Source="\n            ".concat(r,"\n            ").concat(this._getUniformVariableDeclarations(this.gl.commonUniforms,"fragment"),"\n            ").concat(this._getUniformVariableDeclarations(i,"fragment"),"\n            ").concat(n,"\n        "),this.vertexShader=this._getShaderByType(o.VERTEX_SHADER,this.vertexSource),this.fragmentShader=this._getShaderByType(o.FRAGMENT_SHADER,this.Source),this.program=o.createProgram(),this.program&&this.vertexShader&&this.fragmentShader&&(o.attachShader(this.program,this.vertexShader),o.attachShader(this.program,this.fragmentShader),o.linkProgram(this.program),o.getProgramParameter(this.program,o.LINK_STATUS)||console.error(o.getProgramInfoLog(this.program))),o.useProgram(this.program),this.attachUniforms(null,this.gl.commonUniforms),this.attachUniforms(null,this.uniforms)}}class g{draw(){let e=this.gl.getContext();e.useProgram(this.material.program),this.material.uniformInstances.forEach(e=>{let{uniform:t,location:n}=e;t.update(n)}),this.attributeInstances.forEach(e=>{let{attribute:t,location:n}=e;t.use(n)});let t=this.wireframe?e.LINES:e.TRIANGLES;this.geometry.attributes.index.values&&e.drawElements(t,this.geometry.attributes.index.values.length,e.UNSIGNED_SHORT,0)}remove(){this.gl.meshes=this.gl.meshes.filter(e=>e!=this)}constructor(e,t,n,i={}){this.wireframe=!1,this.attributeInstances=[],this.properties=i,this.geometry=t,this.material=n,this.gl=e,Object.entries(this.geometry.attributes).forEach(e=>{let[t,n]=e;this.attributeInstances.push({attribute:n,location:n.attach(t,this.material.program)})}),this.gl.meshes.push(this)}}class m{setCanvas(e){this._canvas=e,this._context=e.getContext("webgl",{antialias:!0})}getCanvas(){return this._canvas}getContext(){if(!this._context)throw Error("Context not available");return this._context}setSize(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:640,t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:480;this.getCanvas().width=e,this.getCanvas().height=t,this.getContext().viewport(0,0,e,t),this.commonUniforms.resolution.value=[e,t],this.commonUniforms.aspectRatio.value=e/t}setOrthographicCamera(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0,t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:0,i=arguments.length>3&&void 0!==arguments[3]?arguments[3]:-2e3,s=arguments.length>4&&void 0!==arguments[4]?arguments[4]:2e3;this.commonUniforms.projectionMatrix.value=[2/this.getCanvas().width,0,0,0,0,2/this.getCanvas().height,0,0,0,0,2/(i-s),0,e,t,n,1]}render(){this.getContext().clearColor(0,0,0,0),this.getContext().clearDepth(1),this.meshes.forEach(e=>{e.draw()})}constructor(e,t,n){this._class=m,this.meshes=[],this.setCanvas(e);let i=[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1];this.commonUniforms={projectionMatrix:new d(this,i),modelViewMatrix:new d(this,i),resolution:new l(this,[1,1],{}),aspectRatio:new a(this,1,{})},this.setSize(null!=t?t:void 0,null!=n?n:void 0)}}class p{update(){if(void 0!==this.values&&void 0!==this.properties.target){let e=this.gl.getContext();e.bindBuffer(this.properties.target,this.buffer),e.bufferData(this.properties.target,this.values,e.STATIC_DRAW)}}attach(e,t){let n=this.gl.getContext(),i=n.getAttribLocation(t,e);return this.properties.target===n.ARRAY_BUFFER&&void 0!==this.properties.size&&(n.enableVertexAttribArray(i),n.vertexAttribPointer(i,this.properties.size,this.type,this.normalized,0,0)),i}use(e){let t=this.gl.getContext();void 0!==this.properties.target&&t.bindBuffer(this.properties.target,this.buffer),this.properties.target===t.ARRAY_BUFFER&&void 0!==this.properties.size&&(t.enableVertexAttribArray(e),t.vertexAttribPointer(e,this.properties.size,this.type,this.normalized,0,0))}constructor(e,t={}){var n;this.normalized=!1,this.properties=t,this.gl=e,this.type=null!==(n=this.properties.type)&&void 0!==n?n:this.gl.getContext().FLOAT,this.buffer=this.gl.getContext().createBuffer(),this.update()}}class f{setTopology(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:1,t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1;this.xSegCount=e,this.ySegCount=t,this.vertexCount=(this.xSegCount+1)*(this.ySegCount+1),this.quadCount=this.xSegCount*this.ySegCount*2,this.attributes.uv.values=new Float32Array(2*this.vertexCount),this.attributes.uvNorm.values=new Float32Array(2*this.vertexCount),this.attributes.index.values=new Uint16Array(3*this.quadCount);for(let e=0;e<=this.ySegCount;e++)for(let t=0;t<=this.xSegCount;t++){let n=e*(this.xSegCount+1)+t;if(this.attributes.uv.values[2*n]=t/this.xSegCount,this.attributes.uv.values[2*n+1]=1-e/this.ySegCount,this.attributes.uvNorm.values[2*n]=t/this.xSegCount*2-1,this.attributes.uvNorm.values[2*n+1]=1-e/this.ySegCount*2,t<this.xSegCount&&e<this.ySegCount){let i=e*this.xSegCount+t;this.attributes.index.values[6*i]=n,this.attributes.index.values[6*i+1]=n+1+this.xSegCount,this.attributes.index.values[6*i+2]=n+1,this.attributes.index.values[6*i+3]=n+1,this.attributes.index.values[6*i+4]=n+1+this.xSegCount,this.attributes.index.values[6*i+5]=n+2+this.xSegCount}}this.attributes.uv.update(),this.attributes.uvNorm.update(),this.attributes.index.update()}setSize(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:1,t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1,n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"xz";this.width=e,this.height=t,this.orientation=n,this.attributes.position.values&&this.attributes.position.values.length===3*this.vertexCount||(this.attributes.position.values=new Float32Array(3*this.vertexCount));let i=-(e/2),s=-(t/2),o=e/this.xSegCount,r=t/this.ySegCount;for(let e=0;e<=this.ySegCount;e++){let t=s+e*r;for(let s=0;s<=this.xSegCount;s++){var a;let r=i+s*o,l=e*(this.xSegCount+1)+s;n[0]&&(this.attributes.position.values[3*l+"xyz".indexOf(n[0])]=r),n[1]&&(this.attributes.position.values[3*l+"xyz".indexOf(null!==(a=n[1])&&void 0!==a?a:"")]=-t)}}this.attributes.position.update()}constructor(e,t,n,i,s,o,r={}){this.xSegCount=0,this.ySegCount=0,this.vertexCount=0,this.quadCount=0,this.width=r.width,this.height=r.height,this.orientation=r.orientation,this.gl=e;let a=this.gl.getContext();a.createBuffer(),this.attributes={position:new p(this.gl,{target:a.ARRAY_BUFFER,size:3}),uv:new p(this.gl,{target:a.ARRAY_BUFFER,size:2}),uvNorm:new p(this.gl,{target:a.ARRAY_BUFFER,size:2}),index:new p(this.gl,{target:a.ELEMENT_ARRAY_BUFFER,size:3,type:a.UNSIGNED_SHORT})},this.setTopology(i,s),this.setSize(t,n,o)}}class x{getOption(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:void 0;return void 0===t&&e in this._class.defaultOptions&&(t=this._class.defaultOptions[e]),e in this.options?this.options[e]:t}findCanvas(e){let t="string"==typeof e?document.querySelector(e):e;return null!=t?t:null}setCanvas(e){e?(this._canvas=e,this._context=e.getContext("webgl",{antialias:!0})):(this._canvas=null,this._context=null)}getCanvas(){if(!this._canvas)throw Error("Missing Canvas. Pass the canvas to the Gradient constructor.");return this._canvas}getContext(){return this._context}setFlag(e,t){return this._flags[e]=t}getFlag(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:void 0;return this._flags[e]||t}handleScroll(){clearTimeout(this.scrollingTimeout),this.scrollingTimeout=setTimeout(this.handleScrollEnd,this.scrollingRefreshDelay),this.getFlag("playing")&&(this.setFlag("isScrolling",!0),this.pause())}handleScrollEnd(){this.setFlag("isScrolling",!1),this.getFlag("isIntersecting")&&this.play()}pause(){this.setFlag("playing",!1)}play(){this.handle=requestAnimationFrame(this.animate),this.setFlag("playing",!0)}disconnect(){this.handle&&cancelAnimationFrame(this.handle),clearTimeout(this.scrollingTimeout),window.removeEventListener("resize",this.resize)}initMaterial(){let e=this.getOption("colors").map(e=>{if(4===e.length){let t=e.substr(1).split("").map(e=>e+e).join("");e="#".concat(t)}return e&&"0x".concat(e.substr(1))}).filter(Boolean).map(this.normalizeColor);this.uniforms={u_time:new a(this._minigl,0),u_shadow_power:new a(this._minigl,10),u_darken_top:new a(this._minigl,this.getCanvas().dataset.jsDarkenTop?1:0),u_active_colors:new c(this._minigl,this.activeColors),u_global:new v(this._minigl,{noiseFreq:new l(this._minigl,[this.freqX,this.freqY]),noiseSpeed:new a(this._minigl,5e-6)}),u_vertDeform:new v(this._minigl,{incline:new a(this._minigl,Math.sin(this.getOption("angle"))/Math.cos(this.getOption("angle"))),offsetTop:new a(this._minigl,-.5),offsetBottom:new a(this._minigl,-.5),noiseFreq:new l(this._minigl,[3,4]),noiseAmp:new a(this._minigl,this.getOption("amplitude")),noiseSpeed:new a(this._minigl,10),noiseFlow:new a(this._minigl,3),noiseSeed:new a(this._minigl,this.seed)},{excludeFrom:"fragment"}),u_baseColor:new h(this._minigl,e[0],{excludeFrom:"fragment"}),u_waveLayers:new u(this._minigl,[],{excludeFrom:"fragment"})};for(let t=1;t<e.length;t+=1){let n=new v(this._minigl,{color:new h(this._minigl,e[t]),noiseFreq:new l(this._minigl,[2+t/e.length,3+t/e.length]),noiseSpeed:new a(this._minigl,11+.3*t),noiseFlow:new a(this._minigl,6.5+.3*t),noiseSeed:new a(this._minigl,this.seed+10*t),noiseFloor:new a(this._minigl,.1),noiseCeil:new a(this._minigl,.63+.07*t)});this.uniforms.u_waveLayers.value.push(n)}return this.vertexShader=[this.shaderFiles.noise,this.shaderFiles.blend,this.shaderFiles.vertex].join("\n\n"),new b(this._minigl,this.vertexShader,this.shaderFiles.fragment,this.uniforms)}initMesh(){this.material=this.initMaterial(),this.geometry=new f(this._minigl,0,0,0,0,"xz"),this.mesh=new g(this._minigl,this.geometry,this.material),this.mesh.wireframe=this.getOption("wireframe")}updateFrequency(e){this.freqX+=e,this.freqY+=e}toggleColor(e){this.activeColors[e]=0===this.activeColors[e]?1:0}init(){let e=this.getOption("loadedClass");e&&this.getCanvas().classList.add(e),this.initMesh(),this.resize(),this.handle=requestAnimationFrame(this.animate),window.addEventListener("resize",this.resize)}normalizeColor(e){let t=Number(e);return[(t>>16&255)/255,(t>>8&255)/255,(255&t)/255]}constructor(e){var t=this;this._class=x,this.vertexShader=null,this.uniforms={},this.time=0,this.mesh=null,this.material=null,this.geometry=null,this.scrollingTimeout=void 0,this.scrollingRefreshDelay=200,this.width=null,this.height=600,this.xSegCount=null,this.ySegCount=null,this.freqX=14e-5,this.freqY=29e-5,this.seed=0,this.freqDelta=1e-5,this.activeColors=[1,1,1,1],this.shaderFiles={vertex:"varying vec3 v_color;\n\nvoid main() {\n  float time = u_time * u_global.noiseSpeed;\n\n  vec2 noiseCoord = resolution * uvNorm * u_global.noiseFreq;\n\n  vec2 st = 1. - uvNorm.xy;\n\n  //\n  // Tilting the plane\n  //\n\n  // Front-to-back tilt\n  float tilt = resolution.y / 2.0 * uvNorm.y;\n\n  // Left-to-right angle\n  float incline = resolution.x * uvNorm.x / 2.0 * u_vertDeform.incline;\n\n  // Up-down shift to offset incline\n  float offset = resolution.x / 2.0 * u_vertDeform.incline * mix(u_vertDeform.offsetBottom, u_vertDeform.offsetTop, uv.y);\n\n  //\n  // Vertex noise\n  //\n\n  float noise = snoise(vec3(\n    noiseCoord.x * u_vertDeform.noiseFreq.x + time * u_vertDeform.noiseFlow,\n    noiseCoord.y * u_vertDeform.noiseFreq.y,\n    time * u_vertDeform.noiseSpeed + u_vertDeform.noiseSeed\n  )) * u_vertDeform.noiseAmp;\n\n  // Fade noise to zero at edges\n  noise *= 1.0 - pow(abs(uvNorm.y), 2.0);\n\n  // Clamp to 0\n  noise = max(0.0, noise);\n\n  vec3 pos = vec3(\n    position.x,\n    position.y + tilt + incline + noise - offset,\n    position.z\n  );\n\n  //\n  // Vertex color, to be passed to fragment shader\n  //\n\n  if (u_active_colors[0] == 1.) {\n    v_color = u_baseColor;\n  }\n\n  for (int i = 0; i < u_waveLayers_length; i++) {\n    if (u_active_colors[i + 1] == 1.) {\n      WaveLayers layer = u_waveLayers[i];\n\n      float noise = smoothstep(\n        layer.noiseFloor,\n        layer.noiseCeil,\n        snoise(vec3(\n          noiseCoord.x * layer.noiseFreq.x + time * layer.noiseFlow,\n          noiseCoord.y * layer.noiseFreq.y,\n          time * layer.noiseSpeed + layer.noiseSeed\n        )) / 2.0 + 0.5\n      );\n\n      v_color = blendNormal(v_color, layer.color, pow(noise, 4.));\n    }\n  }\n\n  //\n  // Finish\n  //\n\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(pos, 1.0);\n}\n",noise:"//\n// Description : Array and textureless GLSL 2D/3D/4D simplex\n//               noise functions.\n//      Author : Ian McEwan, Ashima Arts.\n//  Maintainer : stegu\n//     Lastmod : 20110822 (ijm)\n//     License : Copyright (C) 2011 Ashima Arts. All rights reserved.\n//               Distributed under the MIT License. See LICENSE file.\n//               https://github.com/ashima/webgl-noise\n//               https://github.com/stegu/webgl-noise\n//\n\nvec3 mod289(vec3 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 mod289(vec4 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 permute(vec4 x) {\n    return mod289(((x*34.0)+1.0)*x);\n}\n\nvec4 taylorInvSqrt(vec4 r)\n{\n  return 1.79284291400159 - 0.85373472095314 * r;\n}\n\nfloat snoise(vec3 v)\n{\n  const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;\n  const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);\n\n// First corner\n  vec3 i  = floor(v + dot(v, C.yyy) );\n  vec3 x0 =   v - i + dot(i, C.xxx) ;\n\n// Other corners\n  vec3 g = step(x0.yzx, x0.xyz);\n  vec3 l = 1.0 - g;\n  vec3 i1 = min( g.xyz, l.zxy );\n  vec3 i2 = max( g.xyz, l.zxy );\n\n  //   x0 = x0 - 0.0 + 0.0 * C.xxx;\n  //   x1 = x0 - i1  + 1.0 * C.xxx;\n  //   x2 = x0 - i2  + 2.0 * C.xxx;\n  //   x3 = x0 - 1.0 + 3.0 * C.xxx;\n  vec3 x1 = x0 - i1 + C.xxx;\n  vec3 x2 = x0 - i2 + C.yyy; // 2.0*C.x = 1/3 = C.y\n  vec3 x3 = x0 - D.yyy;      // -1.0+3.0*C.x = -0.5 = -D.y\n\n// Permutations\n  i = mod289(i);\n  vec4 p = permute( permute( permute(\n            i.z + vec4(0.0, i1.z, i2.z, 1.0 ))\n          + i.y + vec4(0.0, i1.y, i2.y, 1.0 ))\n          + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));\n\n// Gradients: 7x7 points over a square, mapped onto an octahedron.\n// The ring size 17*17 = 289 is close to a multiple of 49 (49*6 = 294)\n  float n_ = 0.142857142857; // 1.0/7.0\n  vec3  ns = n_ * D.wyz - D.xzx;\n\n  vec4 j = p - 49.0 * floor(p * ns.z * ns.z);  //  mod(p,7*7)\n\n  vec4 x_ = floor(j * ns.z);\n  vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)\n\n  vec4 x = x_ *ns.x + ns.yyyy;\n  vec4 y = y_ *ns.x + ns.yyyy;\n  vec4 h = 1.0 - abs(x) - abs(y);\n\n  vec4 b0 = vec4( x.xy, y.xy );\n  vec4 b1 = vec4( x.zw, y.zw );\n\n  //vec4 s0 = vec4(lessThan(b0,0.0))*2.0 - 1.0;\n  //vec4 s1 = vec4(lessThan(b1,0.0))*2.0 - 1.0;\n  vec4 s0 = floor(b0)*2.0 + 1.0;\n  vec4 s1 = floor(b1)*2.0 + 1.0;\n  vec4 sh = -step(h, vec4(0.0));\n\n  vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;\n  vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;\n\n  vec3 p0 = vec3(a0.xy,h.x);\n  vec3 p1 = vec3(a0.zw,h.y);\n  vec3 p2 = vec3(a1.xy,h.z);\n  vec3 p3 = vec3(a1.zw,h.w);\n\n//Normalise gradients\n  vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\n  p0 *= norm.x;\n  p1 *= norm.y;\n  p2 *= norm.z;\n  p3 *= norm.w;\n\n// Mix final noise value\n  vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);\n  m = m * m;\n  return 42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1),\n                                dot(p2,x2), dot(p3,x3) ) );\n}\n",blend:"//\n// https://github.com/jamieowen/glsl-blend\n//\n\n// Normal\n\nvec3 blendNormal(vec3 base, vec3 blend) {\n    return blend;\n}\n\nvec3 blendNormal(vec3 base, vec3 blend, float opacity) {\n    return (blendNormal(base, blend) * opacity + base * (1.0 - opacity));\n}\n\n// Screen\n\nfloat blendScreen(float base, float blend) {\n    return 1.0-((1.0-base)*(1.0-blend));\n}\n\nvec3 blendScreen(vec3 base, vec3 blend) {\n    return vec3(blendScreen(base.r,blend.r),blendScreen(base.g,blend.g),blendScreen(base.b,blend.b));\n}\n\nvec3 blendScreen(vec3 base, vec3 blend, float opacity) {\n    return (blendScreen(base, blend) * opacity + base * (1.0 - opacity));\n}\n\n// Multiply\n\nvec3 blendMultiply(vec3 base, vec3 blend) {\n    return base*blend;\n}\n\nvec3 blendMultiply(vec3 base, vec3 blend, float opacity) {\n    return (blendMultiply(base, blend) * opacity + base * (1.0 - opacity));\n}\n\n// Overlay\n\nfloat blendOverlay(float base, float blend) {\n    return base<0.5?(2.0*base*blend):(1.0-2.0*(1.0-base)*(1.0-blend));\n}\n\nvec3 blendOverlay(vec3 base, vec3 blend) {\n    return vec3(blendOverlay(base.r,blend.r),blendOverlay(base.g,blend.g),blendOverlay(base.b,blend.b));\n}\n\nvec3 blendOverlay(vec3 base, vec3 blend, float opacity) {\n    return (blendOverlay(base, blend) * opacity + base * (1.0 - opacity));\n}\n\n// Hard light\n\nvec3 blendHardLight(vec3 base, vec3 blend) {\n    return blendOverlay(blend,base);\n}\n\nvec3 blendHardLight(vec3 base, vec3 blend, float opacity) {\n    return (blendHardLight(base, blend) * opacity + base * (1.0 - opacity));\n}\n\n// Soft light\n\nfloat blendSoftLight(float base, float blend) {\n    return (blend<0.5)?(2.0*base*blend+base*base*(1.0-2.0*blend)):(sqrt(base)*(2.0*blend-1.0)+2.0*base*(1.0-blend));\n}\n\nvec3 blendSoftLight(vec3 base, vec3 blend) {\n    return vec3(blendSoftLight(base.r,blend.r),blendSoftLight(base.g,blend.g),blendSoftLight(base.b,blend.b));\n}\n\nvec3 blendSoftLight(vec3 base, vec3 blend, float opacity) {\n    return (blendSoftLight(base, blend) * opacity + base * (1.0 - opacity));\n}\n\n// Color dodge\n\nfloat blendColorDodge(float base, float blend) {\n    return (blend==1.0)?blend:min(base/(1.0-blend),1.0);\n}\n\nvec3 blendColorDodge(vec3 base, vec3 blend) {\n    return vec3(blendColorDodge(base.r,blend.r),blendColorDodge(base.g,blend.g),blendColorDodge(base.b,blend.b));\n}\n\nvec3 blendColorDodge(vec3 base, vec3 blend, float opacity) {\n    return (blendColorDodge(base, blend) * opacity + base * (1.0 - opacity));\n}\n\n// Color burn\n\nfloat blendColorBurn(float base, float blend) {\n    return (blend==0.0)?blend:max((1.0-((1.0-base)/blend)),0.0);\n}\n\nvec3 blendColorBurn(vec3 base, vec3 blend) {\n    return vec3(blendColorBurn(base.r,blend.r),blendColorBurn(base.g,blend.g),blendColorBurn(base.b,blend.b));\n}\n\nvec3 blendColorBurn(vec3 base, vec3 blend, float opacity) {\n    return (blendColorBurn(base, blend) * opacity + base * (1.0 - opacity));\n}\n\n// Vivid Light\n\nfloat blendVividLight(float base, float blend) {\n    return (blend<0.5)?blendColorBurn(base,(2.0*blend)):blendColorDodge(base,(2.0*(blend-0.5)));\n}\n\nvec3 blendVividLight(vec3 base, vec3 blend) {\n    return vec3(blendVividLight(base.r,blend.r),blendVividLight(base.g,blend.g),blendVividLight(base.b,blend.b));\n}\n\nvec3 blendVividLight(vec3 base, vec3 blend, float opacity) {\n    return (blendVividLight(base, blend) * opacity + base * (1.0 - opacity));\n}\n\n// Lighten\n\nfloat blendLighten(float base, float blend) {\n    return max(blend,base);\n}\n\nvec3 blendLighten(vec3 base, vec3 blend) {\n    return vec3(blendLighten(base.r,blend.r),blendLighten(base.g,blend.g),blendLighten(base.b,blend.b));\n}\n\nvec3 blendLighten(vec3 base, vec3 blend, float opacity) {\n    return (blendLighten(base, blend) * opacity + base * (1.0 - opacity));\n}\n\n// Linear burn\n\nfloat blendLinearBurn(float base, float blend) {\n    // Note : Same implementation as BlendSubtractf\n    return max(base+blend-1.0,0.0);\n}\n\nvec3 blendLinearBurn(vec3 base, vec3 blend) {\n    // Note : Same implementation as BlendSubtract\n    return max(base+blend-vec3(1.0),vec3(0.0));\n}\n\nvec3 blendLinearBurn(vec3 base, vec3 blend, float opacity) {\n    return (blendLinearBurn(base, blend) * opacity + base * (1.0 - opacity));\n}\n\n// Linear dodge\n\nfloat blendLinearDodge(float base, float blend) {\n    // Note : Same implementation as BlendAddf\n    return min(base+blend,1.0);\n}\n\nvec3 blendLinearDodge(vec3 base, vec3 blend) {\n    // Note : Same implementation as BlendAdd\n    return min(base+blend,vec3(1.0));\n}\n\nvec3 blendLinearDodge(vec3 base, vec3 blend, float opacity) {\n    return (blendLinearDodge(base, blend) * opacity + base * (1.0 - opacity));\n}\n\n// Linear light\n\nfloat blendLinearLight(float base, float blend) {\n    return blend<0.5?blendLinearBurn(base,(2.0*blend)):blendLinearDodge(base,(2.0*(blend-0.5)));\n}\n\nvec3 blendLinearLight(vec3 base, vec3 blend) {\n    return vec3(blendLinearLight(base.r,blend.r),blendLinearLight(base.g,blend.g),blendLinearLight(base.b,blend.b));\n}\n\nvec3 blendLinearLight(vec3 base, vec3 blend, float opacity) {\n    return (blendLinearLight(base, blend) * opacity + base * (1.0 - opacity));\n}\n",fragment:"varying vec3 v_color;\n\nvoid main() {\n    vec3 color = v_color;\n    if (u_darken_top == 1.0) {\n        vec2 st = gl_FragCoord.xy/resolution.xy;\n        color.g -= pow(st.y + sin(-12.0) * st.x, u_shadow_power) * 0.4;\n    }\n    gl_FragColor = vec4(color, 1.0);\n}\n"},this.options={canvas:null,colors:x.defaultOptions.colors},this._flags={playing:!0},this._canvas=null,this._context=null,this.resize=()=>{var e,t,n,i,s,o;let[r,a]=this.getOption("density");this.width=null!==(s=null===(e=this._canvas)||void 0===e?void 0:e.getBoundingClientRect().width)&&void 0!==s?s:window.innerWidth,this.height=null!==(o=null===(t=this._canvas)||void 0===t?void 0:t.getBoundingClientRect().height)&&void 0!==o?o:window.innerHeight,this._minigl.setSize(this.width,this.height),this._minigl.setOrthographicCamera(),this.xSegCount=Math.ceil(this.width*r),this.ySegCount=Math.ceil(this.height*a),null===(n=this.mesh)||void 0===n||n.geometry.setTopology(this.xSegCount,this.ySegCount),null===(i=this.mesh)||void 0===i||i.geometry.setSize(this.width,this.height),this.mesh&&(this.mesh.material.uniforms.u_shadow_power.value=this.width<this.height?5:6)},this.animate=function(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0,n=!!window.document.hidden||!t.getFlag("playing")||("number"==typeof e?e:parseInt(e,10))%2==0,i=t.getFlag("lastFrame",0);if(!n){var s;t.time+=Math.min(e-i,1e3/15),null===(s=t.getOption("onTimeUpdate"))||void 0===s||s(t.time),i=t.setFlag("lastFrame",e),t.mesh&&(t.mesh.material.uniforms.u_time.value=t.time),t._minigl.render()}if(0!==i&&t.getOption("static"))return t._minigl.render(),t.disconnect();t.getFlag("playing")&&(t.handle=requestAnimationFrame(t.animate))},this.options=e,this.setCanvas(this.findCanvas(this.getOption("canvas"))),this._minigl=new m(this.getCanvas(),this.getCanvas().offsetWidth,this.getCanvas().offsetHeight),this.time=this.getOption("time")}}x.defaultOptions={canvas:null,colors:["#f00","#0f0","#00f"],wireframe:!1,density:[.06,.16],time:1253106,angle:0,amplitude:320,static:!1,loadedClass:"is-loaded"};let y=e=>{let{className:t,id:n}=e;return(0,o.useEffect)(()=>{let e=new x({canvas:document.getElementById(n),colors:["#a960ee","#ff333d","#90e0ff","#ffcb57"]});return e.init(),()=>e.disconnect()},[n]),(0,s.jsx)("canvas",{width:1024,height:300,id:n,className:t})}}},e=>{var t=t=>e(e.s=t);e.O(0,[609,729,661,244,106,456,744],()=>t(2616)),_N_E=e.O()}]);