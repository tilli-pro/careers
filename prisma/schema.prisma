// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum SocialLink {
  GITHUB
  LINKEDIN
  TWITTER
  DEVTO
  MEDIUM
  PERSONAL
  DRIBBBLE
}

model JobPostingQuestion {
  id       String @id @default(cuid())
  question String

  posting   JobPosting @relation(fields: [postingId], references: [id])
  postingId String

  answers JobPostingApplicantAnswer[]

  @@unique([postingId, question])
}

model JobPostingApplicantAnswer {
  id     String @id @default(cuid())
  answer String

  application JobApplication @relation(fields: [postingId, applicantId], references: [postingId, applicantId])
  postingId   String
  applicantId String

  question   JobPostingQuestion @relation(fields: [questionId], references: [id])
  questionId String

  @@unique([postingId, applicantId, questionId])
}

model JobLocation {
  id       String @id @default(cuid())
  location String
  slug     String @unique // used for query params

  postings JobPosting[]
}

model JobPosting {
  id             String       @id @default(cuid())
  slug           String       @unique
  title          String
  description    String // should be max 180 chars
  post           String // markdown string
  allowedSocials SocialLink[] @default([LINKEDIN, GITHUB])
  salaryRange    Int[]
  remote         Boolean      @default(false)

  location        JobLocation   @relation(fields: [locationId], references: [id])
  locationId      String
  department      Department    @relation(fields: [departmentId], references: [id])
  departmentId    String
  hiringManager   HiringManager @relation(fields: [hiringManagerId], references: [id])
  hiringManagerId String

  applications JobApplication[]
  questions    JobPostingQuestion[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model JobApplication {
  legalName     String
  preferredName String
  email         String
  phoneNums     String[] @default([])
  addresses     String[] @default([])
  resumeUrl     String

  posting   JobPosting @relation(fields: [postingId], references: [id])
  postingId String

  applicant   Applicant? @relation(fields: [applicantId], references: [id])
  applicantId String

  answers    JobPostingApplicantAnswer[]
  interviews Interview[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([postingId, applicantId])
}

model Applicant {
  id String @id @default(cuid())

  user   User?   @relation(fields: [userId], references: [id])
  userId String? @unique

  applications JobApplication[]
}

model Department {
  id   String @id @default(cuid())
  name String
  slug String @unique // used for query params

  postings JobPosting[]
}

model HiringManager {
  id String @id @default(cuid())

  user   User   @relation(fields: [userId], references: [id])
  userId String @unique

  postings     JobPosting[]
  interviewers Interviewer[]
}

model Interview {
  id String @id @default(cuid())

  application JobApplication @relation(fields: [postingId, applicantId], references: [postingId, applicantId])
  applicantId String
  postingId   String
}

model Interviewer {
  id String @id @default(cuid())

  user   User   @relation(fields: [userId], references: [id])
  userId String @unique

  hiringManager   HiringManager @relation(fields: [hiringManagerId], references: [id])
  hiringManagerId String
}

// HERE BE DRAGONS
// This is all Next Auth related stuff
// Modify at your own risk

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? // @db.Text
  access_token             String? // @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? // @db.Text
  session_state            String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  refresh_token_expires_in Int?

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?

  accounts Account[]
  sessions Session[]

  hiringManager HiringManager?
  interviewer   Interviewer?
  applicant     Applicant?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
